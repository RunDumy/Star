{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "5619818438060103089"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    }
  },
  "variables": {
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "resources",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "2858787280529991464"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location used for all deployed resources"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags that will be applied to all resources"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "aiFoundryAccounts": "aif",
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des",
              "computeDisks": "disk",
              "computeDisksOs": "osdisk",
              "computeGalleries": "gal",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla",
              "dataLakeStoreAccounts": "dls",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "documentDBMongoDatabaseAccounts": "cosmon-",
              "eventGridDomains": "evgd-",
              "eventGridDomainsTopics": "evgt-",
              "eventGridEventSubscriptions": "evgs-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck",
              "kustoClusters": "dec",
              "kustoClustersDatabases": "dedb",
              "logicIntegrationAccounts": "ia-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPoliciesWebApplication": "waf",
              "networkFirewallPoliciesRuleGroups": "wafrg",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancersExternal": "lbe-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersInboundNatRules": "rule-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersDataWarehouse": "sqldw-",
              "sqlServersDatabases": "sqldb-",
              "sqlServersDatabasesStretch": "sqlstrdb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsVm": "stvm",
              "storSimpleManagers": "ssimp",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn",
              "synapseWorkspacesAnalyticsWorkspaces": "synw",
              "synapseWorkspacesSqlPoolsDedicated": "syndp",
              "synapseWorkspacesSqlPoolsSpark": "synsp",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "webStaticSites": "stapp-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "resourceToken": "[uniqueString(subscription().id, resourceGroup().id, parameters('location'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "monitoring",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsName": {
                    "value": "[format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))]"
                  },
                  "applicationInsightsName": {
                    "value": "[format('{0}{1}', variables('abbrs').insightsComponents, variables('resourceToken'))]"
                  },
                  "applicationInsightsDashboardName": {
                    "value": "[format('{0}{1}', variables('abbrs').portalDashboards, variables('resourceToken'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "10958835295881470966"
                    },
                    "name": "Azd Azure Monitoring",
                    "description": "Creates an Application Insights instance and a Log Analytics workspace.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource operational insights workspaces name."
                      }
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource insights components name."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "applicationInsightsDashboardName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource portal dashboards name."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.azd-monitoring.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalytics": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "loganalytics",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('logAnalyticsName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "dataRetention": {
                            "value": 30
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "11627784326487264389"
                            },
                            "name": "Log Analytics Workspaces",
                            "description": "This module deploys a Log Analytics Workspace.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "useThisWorkspace": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "PerGB2018",
                              "allowedValues": [
                                "CapacityReservation",
                                "Free",
                                "LACluster",
                                "PerGB2018",
                                "PerNode",
                                "Premium",
                                "Standalone",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. The name of the SKU."
                              }
                            },
                            "skuCapacityReservationLevel": {
                              "type": "int",
                              "defaultValue": 100,
                              "minValue": 100,
                              "maxValue": 5000,
                              "metadata": {
                                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                              }
                            },
                            "storageInsightsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of storage accounts to be read by the workspace."
                              }
                            },
                            "linkedServices": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of services to be linked."
                              }
                            },
                            "linkedStorageAccounts": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                              }
                            },
                            "savedSearches": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Kusto Query Language searches to save."
                              }
                            },
                            "dataExports": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. LAW data export instances to be deployed."
                              }
                            },
                            "dataSources": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. LAW data sources to configure."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. LAW custom tables to be deployed."
                              }
                            },
                            "gallerySolutions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                              }
                            },
                            "dataRetention": {
                              "type": "int",
                              "defaultValue": 365,
                              "minValue": 0,
                              "maxValue": 730,
                              "metadata": {
                                "description": "Optional. Number of days data will be retained for."
                              }
                            },
                            "dailyQuotaGb": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "metadata": {
                                "description": "Optional. The workspace daily quota for ingestion."
                              }
                            },
                            "publicNetworkAccessForIngestion": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics ingestion."
                              }
                            },
                            "publicNetworkAccessForQuery": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. The network access type for accessing Log Analytics query."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                              }
                            },
                            "useResourcePermissions": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "forceCmkForQuery": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalyticsWorkspace": {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "features": {
                                  "searchVersion": 1,
                                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                                },
                                "sku": {
                                  "name": "[parameters('skuName')]",
                                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                                },
                                "retentionInDays": "[parameters('dataRetention')]",
                                "workspaceCapping": {
                                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                                },
                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                              },
                              "identity": "[variables('identity')]"
                            },
                            "logAnalyticsWorkspace_diagnosticSettings": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_roleAssignments": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_storageInsightConfigs": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                                "count": "[length(parameters('storageInsightsConfigs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "containers": {
                                    "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'containers')]"
                                  },
                                  "tables": {
                                    "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'tables')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1745671120474305926"
                                    },
                                    "name": "Log Analytics Workspace Storage Insight Configs",
                                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the storage insights config."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                                      }
                                    },
                                    "containers": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The names of the blob containers that the workspace should read."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The names of the Azure tables that the workspace should read."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2022-09-01",
                                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                    },
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "storageinsightconfig": {
                                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "containers": "[parameters('containers')]",
                                        "tables": "[parameters('tables')]",
                                        "storageAccount": {
                                          "id": "[parameters('storageAccountResourceId')]",
                                          "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                                        }
                                      },
                                      "dependsOn": [
                                        "storageAccount",
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed storage insights configuration."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the storage insight configuration is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the storage insights configuration."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedServices": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedServices",
                                "count": "[length(parameters('linkedServices'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('linkedServices')[copyIndex()].name]"
                                  },
                                  "resourceId": {
                                    "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'resourceId')]"
                                  },
                                  "writeAccessResourceId": {
                                    "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "12032441371027552374"
                                    },
                                    "name": "Log Analytics Workspace Linked Services",
                                    "description": "This module deploys a Log Analytics Workspace Linked Service.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                      }
                                    },
                                    "writeAccessResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "linkedService": {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resourceId": "[parameters('resourceId')]",
                                        "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked service."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked service is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_linkedStorageAccounts": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                                "count": "[length(parameters('linkedStorageAccounts'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                                  },
                                  "resourceId": {
                                    "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "12623216644328477682"
                                    },
                                    "name": "Log Analytics Workspace Linked Storage Accounts",
                                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Query",
                                        "Alerts",
                                        "CustomLogs",
                                        "AzureWatson"
                                      ],
                                      "metadata": {
                                        "description": "Required. Name of the link."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "storageAccountIds": [
                                          "[parameters('resourceId')]"
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed linked storage account."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed linked storage account."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the linked storage account is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_savedSearches": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_savedSearches",
                                "count": "[length(parameters('savedSearches'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                                  },
                                  "etag": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'etag')]"
                                  },
                                  "displayName": {
                                    "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                                  },
                                  "category": {
                                    "value": "[parameters('savedSearches')[copyIndex()].category]"
                                  },
                                  "query": {
                                    "value": "[parameters('savedSearches')[copyIndex()].query]"
                                  },
                                  "functionAlias": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionAlias')]"
                                  },
                                  "functionParameters": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionParameters')]"
                                  },
                                  "version": {
                                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'version')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "7683333179440464721"
                                    },
                                    "name": "Log Analytics Workspace Saved Searches",
                                    "description": "This module deploys a Log Analytics Workspace Saved Search.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the saved search."
                                      }
                                    },
                                    "displayName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Display name for the search."
                                      }
                                    },
                                    "category": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Query category."
                                      }
                                    },
                                    "query": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Kusto Query to be stored."
                                      }
                                    },
                                    "tags": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    },
                                    "functionAlias": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The function alias if query serves as a function."
                                      }
                                    },
                                    "functionParameters": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                      }
                                    },
                                    "version": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The version number of the query language."
                                      }
                                    },
                                    "etag": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "savedSearch": {
                                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "properties": {
                                        "etag": "[parameters('etag')]",
                                        "tags": "[coalesce(parameters('tags'), createArray())]",
                                        "displayName": "[parameters('displayName')]",
                                        "category": "[parameters('category')]",
                                        "query": "[parameters('query')]",
                                        "functionAlias": "[parameters('functionAlias')]",
                                        "functionParameters": "[parameters('functionParameters')]",
                                        "version": "[parameters('version')]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed saved search."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the saved search is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed saved search."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace",
                                "logAnalyticsWorkspace_linkedStorageAccounts"
                              ]
                            },
                            "logAnalyticsWorkspace_dataExports": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataExports",
                                "count": "[length(parameters('dataExports'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('dataExports')[copyIndex()].name]"
                                  },
                                  "destination": {
                                    "value": "[tryGet(parameters('dataExports')[copyIndex()], 'destination')]"
                                  },
                                  "enable": {
                                    "value": "[tryGet(parameters('dataExports')[copyIndex()], 'enable')]"
                                  },
                                  "tableNames": {
                                    "value": "[tryGet(parameters('dataExports')[copyIndex()], 'tableNames')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "5765609820817623497"
                                    },
                                    "name": "Log Analytics Workspace Data Exports",
                                    "description": "This module deploys a Log Analytics Workspace Data Export.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "minLength": 4,
                                      "maxLength": 63,
                                      "metadata": {
                                        "description": "Required. The data export rule name."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "destination": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Destination properties."
                                      }
                                    },
                                    "enable": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Active when enabled."
                                      }
                                    },
                                    "tableNames": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "destination": "[parameters('destination')]",
                                        "enable": "[parameters('enable')]",
                                        "tableNames": "[parameters('tableNames')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the data export."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the data export."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the data export was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_dataSources": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_dataSources",
                                "count": "[length(parameters('dataSources'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('dataSources')[copyIndex()].name]"
                                  },
                                  "kind": {
                                    "value": "[parameters('dataSources')[copyIndex()].kind]"
                                  },
                                  "linkedResourceId": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'linkedResourceId')]"
                                  },
                                  "eventLogName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventLogName')]"
                                  },
                                  "eventTypes": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventTypes')]"
                                  },
                                  "objectName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'objectName')]"
                                  },
                                  "instanceName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'instanceName')]"
                                  },
                                  "intervalSeconds": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'intervalSeconds')]"
                                  },
                                  "counterName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'counterName')]"
                                  },
                                  "state": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'state')]"
                                  },
                                  "syslogName": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogName')]"
                                  },
                                  "syslogSeverities": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogSeverities')]"
                                  },
                                  "performanceCounters": {
                                    "value": "[tryGet(parameters('dataSources')[copyIndex()], 'performanceCounters')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "13460038983765020046"
                                    },
                                    "name": "Log Analytics Workspace Datasources",
                                    "description": "This module deploys a Log Analytics Workspace Data Source.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the solution."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "AzureActivityLog",
                                      "allowedValues": [
                                        "AzureActivityLog",
                                        "WindowsEvent",
                                        "WindowsPerformanceCounter",
                                        "IISLogs",
                                        "LinuxSyslog",
                                        "LinuxSyslogCollection",
                                        "LinuxPerformanceObject",
                                        "LinuxPerformanceCollection"
                                      ],
                                      "metadata": {
                                        "description": "Required. The kind of the DataSource."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to configure in the resource."
                                      }
                                    },
                                    "linkedResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the resource to be linked."
                                      }
                                    },
                                    "eventLogName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "eventTypes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                                      }
                                    },
                                    "objectName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "instanceName": {
                                      "type": "string",
                                      "defaultValue": "*",
                                      "metadata": {
                                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "intervalSeconds": {
                                      "type": "int",
                                      "defaultValue": 60,
                                      "metadata": {
                                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                      }
                                    },
                                    "performanceCounters": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                      }
                                    },
                                    "counterName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                      }
                                    },
                                    "state": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                      }
                                    },
                                    "syslogName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                                      }
                                    },
                                    "syslogSeverities": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                                    },
                                    "dataSource": {
                                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                                      "apiVersion": "2020-08-01",
                                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                      "kind": "[parameters('kind')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed data source."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the data source is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed data source."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_tables": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "workspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()].name]"
                                  },
                                  "plan": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'plan')]"
                                  },
                                  "schema": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'schema')]"
                                  },
                                  "retentionInDays": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'retentionInDays')]"
                                  },
                                  "totalRetentionInDays": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'totalRetentionInDays')]"
                                  },
                                  "restoredLogs": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'restoredLogs')]"
                                  },
                                  "searchResults": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'searchResults')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10380077652898392916"
                                    },
                                    "name": "Log Analytics Workspace Tables",
                                    "description": "This module deploys a Log Analytics Workspace Table.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the table."
                                      }
                                    },
                                    "workspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "plan": {
                                      "type": "string",
                                      "defaultValue": "Analytics",
                                      "allowedValues": [
                                        "Basic",
                                        "Analytics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                                      }
                                    },
                                    "restoredLogs": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Restore parameters."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 730,
                                      "metadata": {
                                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                                      }
                                    },
                                    "schema": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Table's schema."
                                      }
                                    },
                                    "searchResults": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Parameters of the search job that initiated this table."
                                      }
                                    },
                                    "totalRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 2555,
                                      "metadata": {
                                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "workspace": {
                                      "existing": true,
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('workspaceName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                                      "apiVersion": "2022-10-01",
                                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "properties": {
                                        "plan": "[parameters('plan')]",
                                        "restoredLogs": "[parameters('restoredLogs')]",
                                        "retentionInDays": "[parameters('retentionInDays')]",
                                        "schema": "[parameters('schema')]",
                                        "searchResults": "[parameters('searchResults')]",
                                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                                      },
                                      "dependsOn": [
                                        "workspace"
                                      ]
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the table."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the table."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the table was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "logAnalyticsWorkspace_solutions": {
                              "copy": {
                                "name": "logAnalyticsWorkspace_solutions",
                                "count": "[length(parameters('gallerySolutions'))]"
                              },
                              "condition": "[not(empty(parameters('gallerySolutions')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "product": {
                                    "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'product')]"
                                  },
                                  "publisher": {
                                    "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'publisher')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(parameters('gallerySolutions')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.23.1.45101",
                                      "templateHash": "18444780972506374592"
                                    },
                                    "name": "Operations Management Solutions",
                                    "description": "This module deploys an Operations Management Solution.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                                      }
                                    },
                                    "logAnalyticsWorkspaceName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "product": {
                                      "type": "string",
                                      "defaultValue": "OMSGallery",
                                      "metadata": {
                                        "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "defaultValue": "Microsoft",
                                      "metadata": {
                                        "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                                    "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.OperationsManagement/solutions",
                                      "apiVersion": "2015-11-01-preview",
                                      "name": "[variables('solutionName')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                                      },
                                      "plan": {
                                        "name": "[variables('solutionName')]",
                                        "promotionCode": "",
                                        "product": "[variables('solutionProduct')]",
                                        "publisher": "[parameters('publisher')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed solution."
                                      },
                                      "value": "[variables('solutionName')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed solution."
                                      },
                                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group where the solution is deployed."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed log analytics workspace."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed log analytics workspace."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed log analytics workspace."
                              },
                              "value": "[parameters('name')]"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The ID associated with the workspace."
                              },
                              "value": "[reference('logAnalyticsWorkspace').customerId]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                            }
                          }
                        }
                      }
                    },
                    "applicationInsights": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "applicationinsights",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[reference('logAnalytics').outputs.resourceId.value]"
                          },
                          "name": {
                            "value": "[parameters('applicationInsightsName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "dashboardName": {
                            "value": "[parameters('applicationInsightsDashboardName')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "17156187352453961206"
                            },
                            "name": "Application Insights Components",
                            "description": "Creates an Application Insights instance based on an existing Log Analytics workspace.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource insights components name."
                              }
                            },
                            "dashboardName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource portal dashboards name."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the loganalytics workspace."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "web",
                              "metadata": {
                                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                              }
                            },
                            "applicationType": {
                              "type": "string",
                              "defaultValue": "web",
                              "allowedValues": [
                                "web",
                                "other"
                              ],
                              "metadata": {
                                "description": "Optional. Application type."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.ptn.azd-insightsdashboard.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "applicationInsights": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-appinsights', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "applicationType": {
                                    "value": "[parameters('applicationType')]"
                                  },
                                  "workspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10653241142071426932"
                                    },
                                    "name": "Application Insights",
                                    "description": "This component deploys an Application Insights instance.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Application Insights."
                                      }
                                    },
                                    "applicationType": {
                                      "type": "string",
                                      "defaultValue": "web",
                                      "allowedValues": [
                                        "web",
                                        "other"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Application type."
                                      }
                                    },
                                    "workspaceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
                                      }
                                    },
                                    "disableIpMasking": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Disable IP masking. Default value is set to true."
                                      }
                                    },
                                    "disableLocalAuth": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
                                      }
                                    },
                                    "forceCustomerStorageForProfiler": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Force users to create their own storage account for profiler and debugger."
                                      }
                                    },
                                    "linkedStorageAccountResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Linked storage account resource ID."
                                      }
                                    },
                                    "publicNetworkAccessForIngestion": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                                      }
                                    },
                                    "publicNetworkAccessForQuery": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                                      }
                                    },
                                    "retentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "allowedValues": [
                                        30,
                                        60,
                                        90,
                                        120,
                                        180,
                                        270,
                                        365,
                                        550,
                                        730
                                      ],
                                      "metadata": {
                                        "description": "Optional. Retention period in days."
                                      }
                                    },
                                    "samplingPercentage": {
                                      "type": "int",
                                      "defaultValue": 100,
                                      "minValue": 0,
                                      "maxValue": 100,
                                      "metadata": {
                                        "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                                      "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "appInsights": {
                                      "type": "Microsoft.Insights/components",
                                      "apiVersion": "2020-02-02",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": {
                                        "Application_Type": "[parameters('applicationType')]",
                                        "DisableIpMasking": "[parameters('disableIpMasking')]",
                                        "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                                        "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                        "RetentionInDays": "[parameters('retentionInDays')]",
                                        "SamplingPercentage": "[parameters('samplingPercentage')]"
                                      }
                                    },
                                    "appInsights_roleAssignments": {
                                      "copy": {
                                        "name": "appInsights_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "appInsights"
                                      ]
                                    },
                                    "appInsights_diagnosticSettings": {
                                      "copy": {
                                        "name": "appInsights_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "appInsights"
                                      ]
                                    },
                                    "linkedStorageAccount": {
                                      "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "appInsightsName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "storageAccountResourceId": {
                                            "value": "[parameters('linkedStorageAccountResourceId')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "216781367921725873"
                                            },
                                            "name": "Application Insights Linked Storage Account",
                                            "description": "This component deploys an Application Insights Linked Storage Account.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "appInsightsName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "storageAccountResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Linked storage account resource ID."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "microsoft.insights/components/linkedStorageAccounts",
                                              "apiVersion": "2020-03-01-preview",
                                              "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                                              "properties": {
                                                "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Linked Storage Account."
                                              },
                                              "value": "ServiceProfiler"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the Linked Storage Account."
                                              },
                                              "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the agent pool was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "appInsights"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the application insights component."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the application insights component."
                                      },
                                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the application insights component was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "applicationId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The application ID of the application insights component."
                                      },
                                      "value": "[reference('appInsights').AppId]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('appInsights', '2020-02-02', 'full').location]"
                                    },
                                    "instrumentationKey": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
                                      },
                                      "value": "[reference('appInsights').InstrumentationKey]"
                                    },
                                    "connectionString": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Application Insights Connection String."
                                      },
                                      "value": "[reference('appInsights').ConnectionString]"
                                    }
                                  }
                                }
                              }
                            },
                            "applicationInsightsDashboard": {
                              "condition": "[not(empty(parameters('dashboardName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "application-insights-dashboard",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('dashboardName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "applicationInsightsName": {
                                    "value": "[reference('applicationInsights').outputs.name.value]"
                                  },
                                  "applicationInsightsResourceId": {
                                    "value": "[reference('applicationInsights').outputs.resourceId.value]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "9856731218551847403"
                                    },
                                    "name": "Azure Portal Dashboard",
                                    "description": "Creates a dashboard for an Application Insights instance.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The portal dashboard name."
                                      }
                                    },
                                    "applicationInsightsName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource insights components name."
                                      }
                                    },
                                    "applicationInsightsResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource insights components ID."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "dashboard": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "dashboard-deployment",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "lenses": {
                                            "value": [
                                              {
                                                "order": 0,
                                                "parts": [
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 0,
                                                      "colSpan": 2,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "id",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/AspNetOverviewPinnedPart",
                                                      "asset": {
                                                        "idInputName": "id",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "overview"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 2,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/ProactiveDetectionAsyncPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "ProactiveDetection"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 3,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "ResourceId",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/QuickPulseButtonSmallPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "endTime": null,
                                                            "createdTime": "2018-05-04T01:20:33.345Z",
                                                            "isInitialTime": true,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/AvailabilityNavButtonPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 5,
                                                      "y": 0,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "endTime": null,
                                                            "createdTime": "2018-05-08T18:47:35.237Z",
                                                            "isInitialTime": true,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        },
                                                        {
                                                          "name": "ConfigurationId",
                                                          "value": "78ce933e-e864-4b05-a27b-71fd55a6afad"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/AppMapButtonPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Usage",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 3,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "endTime": null,
                                                            "createdTime": "2018-05-04T01:22:35.782Z",
                                                            "isInitialTime": true,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/UsageUsersOverviewPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Reliability",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 7,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ResourceId",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        },
                                                        {
                                                          "name": "DataModel",
                                                          "value": {
                                                            "version": "1.0.0",
                                                            "timeContext": {
                                                              "durationMs": 86400000,
                                                              "createdTime": "2018-05-04T23:42:40.072Z",
                                                              "isInitialTime": false,
                                                              "grain": 1,
                                                              "useDashboardTimeRange": false
                                                            }
                                                          },
                                                          "isOptional": true
                                                        },
                                                        {
                                                          "name": "ConfigurationId",
                                                          "value": "8a02f7bf-ac0f-40e1-afe9-f0e72cfee77f",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/CuratedBladeFailuresPinnedPart",
                                                      "isAdapter": true,
                                                      "asset": {
                                                        "idInputName": "ResourceId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "failures"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Responsiveness\r\n",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 11,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ResourceId",
                                                          "value": "[parameters('applicationInsightsResourceId')]"
                                                        },
                                                        {
                                                          "name": "DataModel",
                                                          "value": {
                                                            "version": "1.0.0",
                                                            "timeContext": {
                                                              "durationMs": 86400000,
                                                              "createdTime": "2018-05-04T23:43:37.804Z",
                                                              "isInitialTime": false,
                                                              "grain": 1,
                                                              "useDashboardTimeRange": false
                                                            }
                                                          },
                                                          "isOptional": true
                                                        },
                                                        {
                                                          "name": "ConfigurationId",
                                                          "value": "2a8ede4f-2bee-4b9c-aed9-2db0e8a01865",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/CuratedBladePerformancePinnedPart",
                                                      "isAdapter": true,
                                                      "asset": {
                                                        "idInputName": "ResourceId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "performance"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 12,
                                                      "y": 1,
                                                      "colSpan": 3,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [],
                                                      "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                      "settings": {
                                                        "content": {
                                                          "settings": {
                                                            "content": "# Browser",
                                                            "title": "",
                                                            "subtitle": ""
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 15,
                                                      "y": 1,
                                                      "colSpan": 1,
                                                      "rowSpan": 1
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "ComponentId",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "MetricsExplorerJsonDefinitionId",
                                                          "value": "BrowserPerformanceTimelineMetrics"
                                                        },
                                                        {
                                                          "name": "TimeContext",
                                                          "value": {
                                                            "durationMs": 86400000,
                                                            "createdTime": "2018-05-08T12:16:27.534Z",
                                                            "isInitialTime": false,
                                                            "grain": 1,
                                                            "useDashboardTimeRange": false
                                                          }
                                                        },
                                                        {
                                                          "name": "CurrentFilter",
                                                          "value": {
                                                            "eventTypes": [
                                                              4,
                                                              1,
                                                              3,
                                                              5,
                                                              2,
                                                              6,
                                                              13
                                                            ],
                                                            "typeFacets": {},
                                                            "isPermissive": false
                                                          }
                                                        },
                                                        {
                                                          "name": "id",
                                                          "value": {
                                                            "Name": "[parameters('applicationInsightsName')]",
                                                            "SubscriptionId": "[subscription().subscriptionId]",
                                                            "ResourceGroup": "[resourceGroup().name]"
                                                          }
                                                        },
                                                        {
                                                          "name": "Version",
                                                          "value": "1.0"
                                                        }
                                                      ],
                                                      "type": "Extension/AppInsightsExtension/PartType/MetricsExplorerBladePinnedPart",
                                                      "asset": {
                                                        "idInputName": "ComponentId",
                                                        "type": "ApplicationInsights"
                                                      },
                                                      "defaultMenuItemId": "browser"
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "sessions/count",
                                                                  "aggregationType": 5,
                                                                  "namespace": "microsoft.insights/components/kusto",
                                                                  "metricVisualization": {
                                                                    "displayName": "Sessions",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "users/count",
                                                                  "aggregationType": 5,
                                                                  "namespace": "microsoft.insights/components/kusto",
                                                                  "metricVisualization": {
                                                                    "displayName": "Users",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Unique sessions and users",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "segmentationUsers"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "requests/failed",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Failed requests",
                                                                    "color": "#EC008C"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Failed requests",
                                                              "visualization": {
                                                                "chartType": 3,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "failures"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "requests/duration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Server response time",
                                                                    "color": "#00BCF2"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Server response time",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "performance"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 12,
                                                      "y": 2,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/networkDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Page load network connect time",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/processingDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Client processing time",
                                                                    "color": "#44F1C8"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/sendDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Send request time",
                                                                    "color": "#EB9371"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "browserTimings/receiveDuration",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Receiving response time",
                                                                    "color": "#0672F1"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average page load time breakdown",
                                                              "visualization": {
                                                                "chartType": 3,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "availabilityResults/availabilityPercentage",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Availability",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average availability",
                                                              "visualization": {
                                                                "chartType": 3,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              },
                                                              "openBladeOnClick": {
                                                                "openBlade": true,
                                                                "destinationBlade": {
                                                                  "extensionName": "HubsExtension",
                                                                  "bladeName": "ResourceMenuBlade",
                                                                  "parameters": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]",
                                                                    "menuid": "availability"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "exceptions/server",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Server exceptions",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "dependencies/failed",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Dependency failures",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Server exceptions and Dependency failures",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/processorCpuPercentage",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Processor time",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                },
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/processCpuPercentage",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Process CPU",
                                                                    "color": "#7E58FF"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average processor and process CPU utilization",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 12,
                                                      "y": 5,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "exceptions/browser",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Browser exceptions",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Browser exceptions",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 0,
                                                      "y": 8,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "availabilityResults/count",
                                                                  "aggregationType": 7,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Availability test results count",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Availability test results count",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 4,
                                                      "y": 8,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/processIOBytesPerSecond",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Process IO rate",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average process I/O rate",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  },
                                                  {
                                                    "position": {
                                                      "x": 8,
                                                      "y": 8,
                                                      "colSpan": 4,
                                                      "rowSpan": 3
                                                    },
                                                    "metadata": {
                                                      "inputs": [
                                                        {
                                                          "name": "options",
                                                          "value": {
                                                            "chart": {
                                                              "metrics": [
                                                                {
                                                                  "resourceMetadata": {
                                                                    "id": "[parameters('applicationInsightsResourceId')]"
                                                                  },
                                                                  "name": "performanceCounters/memoryAvailableBytes",
                                                                  "aggregationType": 4,
                                                                  "namespace": "microsoft.insights/components",
                                                                  "metricVisualization": {
                                                                    "displayName": "Available memory",
                                                                    "color": "#47BDF5"
                                                                  }
                                                                }
                                                              ],
                                                              "title": "Average available memory",
                                                              "visualization": {
                                                                "chartType": 2,
                                                                "legendVisualization": {
                                                                  "isVisible": true,
                                                                  "position": 2,
                                                                  "hideSubtitle": false
                                                                },
                                                                "axisVisualization": {
                                                                  "x": {
                                                                    "isVisible": true,
                                                                    "axisType": 2
                                                                  },
                                                                  "y": {
                                                                    "isVisible": true,
                                                                    "axisType": 1
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "name": "sharedTimeRange",
                                                          "isOptional": true
                                                        }
                                                      ],
                                                      "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                      "settings": {}
                                                    }
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "12676032921679464791"
                                            },
                                            "name": "Portal Dashboards",
                                            "description": "This module deploys a Portal Dashboard.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the dashboard to create."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "lenses": {
                                              "type": "array",
                                              "items": {
                                                "type": "object"
                                              },
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. The dashboard lenses."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The dashboard metadata."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.portal-dashboard.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "dashboard": {
                                              "type": "Microsoft.Portal/dashboards",
                                              "apiVersion": "2020-09-01-preview",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "lenses": "[parameters('lenses')]",
                                                "metadata": "[parameters('metadata')]"
                                              }
                                            },
                                            "dashboard_roleAssignments": {
                                              "copy": {
                                                "name": "dashboard_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Portal/dashboards/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Portal/dashboards', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "dashboard"
                                              ]
                                            },
                                            "dashboard_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Portal/dashboards/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "dashboard"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the dashboard."
                                              },
                                              "value": "[resourceId('Microsoft.Portal/dashboards', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the dashboard was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the dashboard."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the dashboard was deployed into."
                                              },
                                              "value": "[reference('dashboard', '2020-09-01-preview', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "dashboardResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the dashboard."
                                      },
                                      "value": "[reference('dashboard').outputs.resourceId.value]"
                                    },
                                    "dashboardName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource name of the dashboard."
                                      },
                                      "value": "[reference('dashboard').outputs.name.value]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "applicationInsights"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the application insights components were deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "applicationInsightsName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.name.value]"
                            },
                            "dashboardName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource name of the dashboard."
                              },
                              "value": "[if(not(empty(parameters('dashboardName'))), reference('applicationInsightsDashboard').outputs.dashboardName.value, '')]"
                            },
                            "applicationInsightsResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.resourceId.value]"
                            },
                            "dashboardResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the dashboard."
                              },
                              "value": "[if(not(empty(parameters('dashboardName'))), reference('applicationInsightsDashboard').outputs.dashboardResourceId.value, '')]"
                            },
                            "applicationInsightsConnectionString": {
                              "type": "string",
                              "metadata": {
                                "description": "The connection string of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.connectionString.value]"
                            },
                            "applicationInsightsInstrumentationKey": {
                              "type": "string",
                              "metadata": {
                                "description": "The instrumentation key of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.instrumentationKey.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalytics"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the operational-insights monitoring was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "applicationInsightsConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The connection string of the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsConnectionString.value]"
                    },
                    "applicationInsightsResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsResourceId.value]"
                    },
                    "applicationInsightsInstrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The instrumentation key for the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsInstrumentationKey.value]"
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application insights."
                      },
                      "value": "[reference('applicationInsights').outputs.applicationInsightsName.value]"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the loganalytics workspace."
                      },
                      "value": "[reference('logAnalytics').outputs.resourceId.value]"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the log analytics workspace."
                      },
                      "value": "[reference('logAnalytics').outputs.name.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "app-service-plan",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}{1}', variables('abbrs').webServerFarms, variables('resourceToken'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "skuName": {
                    "value": "B1"
                  },
                  "skuCapacity": {
                    "value": 1
                  },
                  "kind": {
                    "value": "Linux"
                  },
                  "reserved": {
                    "value": true
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "1276240102396900890"
                    },
                    "name": "App Service Plan",
                    "description": "This module deploys an App Service Plan.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 60,
                      "metadata": {
                        "description": "Required. Name of the app service plan."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "metadata": {
                        "example": "  'F1'\n  'B1'\n  'P1v3'\n  'I1v2'\n  ",
                        "description": "Required. The name of the SKU will Determine the tier, size, family of the App Service Plan."
                      }
                    },
                    "skuCapacity": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Number of workers associated with the App Service Plan."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "App",
                      "allowedValues": [
                        "App",
                        "Elastic",
                        "FunctionApp",
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Optional. Kind of server OS."
                      }
                    },
                    "reserved": {
                      "type": "bool",
                      "defaultValue": "[equals(parameters('kind'), 'Linux')]",
                      "metadata": {
                        "description": "Conditional. Defaults to false when creating Windows/app App Service Plan. Required if creating a Linux App Service Plan and must be set to true."
                      }
                    },
                    "appServiceEnvironmentId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
                      }
                    },
                    "workerTierName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Target worker tier assigned to the App Service plan."
                      }
                    },
                    "perSiteScaling": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
                      }
                    },
                    "maximumElasticWorkerCount": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
                      }
                    },
                    "targetWorkerCount": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Scaling worker count."
                      }
                    },
                    "targetWorkerSize": {
                      "type": "int",
                      "defaultValue": 0,
                      "allowedValues": [
                        0,
                        1,
                        2
                      ],
                      "metadata": {
                        "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": "[if(or(startsWith(parameters('skuName'), 'P'), startsWith(parameters('skuName'), 'EP')), true(), false())]",
                      "metadata": {
                        "description": "Optional. Zone Redundant server farms can only be used on Premium or ElasticPremium SKU tiers within ZRS Supported regions (https://learn.microsoft.com/en-us/azure/storage/common/redundancy-regions-zrs)."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.web-serverfarm.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "appServicePlan": {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "kind": "[parameters('kind')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "capacity": "[parameters('skuCapacity')]"
                      },
                      "properties": {
                        "workerTierName": "[parameters('workerTierName')]",
                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                        "perSiteScaling": "[parameters('perSiteScaling')]",
                        "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                        "reserved": "[parameters('reserved')]",
                        "targetWorkerCount": "[parameters('targetWorkerCount')]",
                        "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                        "zoneRedundant": "[parameters('zoneRedundant')]"
                      }
                    },
                    "appServicePlan_diagnosticSettings": {
                      "copy": {
                        "name": "appServicePlan_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "appServicePlan"
                      ]
                    },
                    "appServicePlan_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "appServicePlan"
                      ]
                    },
                    "appServicePlan_roleAssignments": {
                      "copy": {
                        "name": "appServicePlan_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Web/serverfarms', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "appServicePlan"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the app service plan was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the app service plan."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the app service plan."
                      },
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('appServicePlan', '2022-09-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "staridentity",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}star-{1}', variables('abbrs').managedIdentityUserAssignedIdentities, variables('resourceToken'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "998408512764899332"
                    },
                    "name": "User Assigned Identities",
                    "description": "This module deploys a User Assigned Identity.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "federatedIdentityCredentialsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the federated identity credential."
                            }
                          },
                          "audiences": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. The list of audiences that can appear in the issued token."
                            }
                          },
                          "issuer": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The URL of the issuer to be trusted."
                            }
                          },
                          "subject": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The identifier of the external identity."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the User Assigned Identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "federatedIdentityCredentials": {
                      "$ref": "#/definitions/federatedIdentityCredentialsType",
                      "metadata": {
                        "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "userAssignedIdentity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    "userAssignedIdentity_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_roleAssignments": {
                      "copy": {
                        "name": "userAssignedIdentity_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_federatedIdentityCredentials": {
                      "copy": {
                        "name": "userAssignedIdentity_federatedIdentityCredentials",
                        "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[parameters('name')]"
                          },
                          "audiences": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                          },
                          "issuer": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                          },
                          "subject": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4317497001099502136"
                            },
                            "name": "User Assigned Identity Federated Identity Credential",
                            "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "userAssignedIdentityName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "audiences": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                              }
                            },
                            "subject": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                              "apiVersion": "2023-01-31",
                              "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                              "properties": {
                                "audiences": "[parameters('audiences')]",
                                "issuer": "[parameters('issuer')]",
                                "subject": "[parameters('subject')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the federated identity credential."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the federated identity credential."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the federated identity credential was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID (object ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').principalId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The client ID (application ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').clientId]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the user assigned identity was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "star-backend",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}backend-{1}', variables('abbrs').webSitesAppService, variables('resourceToken'))]"
                  },
                  "kind": {
                    "value": "app,linux"
                  },
                  "serverFarmResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-service-plan'), '2025-04-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', 'star-backend'))]"
                  },
                  "managedIdentities": {
                    "value": {
                      "systemAssigned": false,
                      "userAssignedResourceIds": [
                        "[reference(resourceId('Microsoft.Resources/deployments', 'staridentity'), '2025-04-01').outputs.resourceId.value]"
                      ]
                    }
                  },
                  "siteConfig": {
                    "value": {
                      "linuxFxVersion": "PYTHON|3.11",
                      "appSettings": [
                        {
                          "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                          "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2025-04-01').outputs.applicationInsightsConnectionString.value]"
                        },
                        {
                          "name": "AZURE_CLIENT_ID",
                          "value": "[reference(resourceId('Microsoft.Resources/deployments', 'staridentity'), '2025-04-01').outputs.clientId.value]"
                        },
                        {
                          "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                          "value": "true"
                        },
                        {
                          "name": "ENABLE_ORYX_BUILD",
                          "value": "true"
                        }
                      ]
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "14939100928164125813"
                    },
                    "name": "Web/Function Apps",
                    "description": "This module deploys a Web or Function App.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "privateLinkServiceConnectionName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private link connection to create."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroup": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the Private DNS Zone Group."
                                }
                              },
                              "privateDnsZoneGroupConfigs": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group config."
                                      }
                                    },
                                    "privateDnsZoneResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of the private DNS zone."
                                      }
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone group to configure for the private endpoint."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. If Manual Private Link Connection is required."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          },
                          "resourceGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "functionapp",
                        "functionapp,linux",
                        "functionapp,workflowapp",
                        "functionapp,workflowapp,linux",
                        "functionapp,linux,container",
                        "functionapp,linux,container,azurecontainerapps",
                        "app,linux",
                        "app",
                        "linux,api",
                        "api",
                        "app,linux,container",
                        "app,container,windows"
                      ],
                      "metadata": {
                        "description": "Required. Type of site to deploy."
                      }
                    },
                    "serverFarmResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the app service plan to use for the site."
                      }
                    },
                    "managedEnvironmentId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                      }
                    },
                    "httpsOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
                      }
                    },
                    "clientAffinityEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If client affinity is enabled."
                      }
                    },
                    "appServiceEnvironmentResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "keyVaultAccessIdentityResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                      }
                    },
                    "storageAccountRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Checks if Customer provided storage account is required."
                      }
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                      }
                    },
                    "vnetContentShareEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable accessing content over virtual network."
                      }
                    },
                    "vnetImagePullEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable pulling image over Virtual Network."
                      }
                    },
                    "vnetRouteAllEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                      }
                    },
                    "scmSiteAlsoStopped": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
                      }
                    },
                    "siteConfig": {
                      "type": "object",
                      "defaultValue": {
                        "alwaysOn": true
                      },
                      "metadata": {
                        "description": "Optional. The site config object."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "storageAccountUseIdentityAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                      }
                    },
                    "apiManagementConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The web settings api management configuration."
                      }
                    },
                    "msDeployConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The extension MSDeployment configuration."
                      }
                    },
                    "appInsightResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    },
                    "appSettingsKeyValuePairs": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                      }
                    },
                    "authSettingV2Configuration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The auth settings V2 configuration."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "logsConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The logs settings configuration."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "slots": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for deployment slots for an app."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "clientCertEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                      }
                    },
                    "clientCertExclusionPaths": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                      }
                    },
                    "clientCertMode": {
                      "type": "string",
                      "defaultValue": "Optional",
                      "allowedValues": [
                        "Optional",
                        "OptionalInteractiveUser",
                        "Required"
                      ],
                      "metadata": {
                        "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
                      }
                    },
                    "cloningInfo": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If specified during app creation, the app is cloned from a source app."
                      }
                    },
                    "containerSize": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Size of the function container."
                      }
                    },
                    "dailyMemoryTimeQuota": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                      }
                    },
                    "hostNameSslStates": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                      }
                    },
                    "hyperV": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Hyper-V sandbox."
                      }
                    },
                    "redundancyMode": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "ActiveActive",
                        "Failover",
                        "GeoRedundant",
                        "Manual",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Site redundancy mode."
                      }
                    },
                    "basicPublishingCredentialsPolicies": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The site publishing credential policy names which are associated with the sites."
                      }
                    },
                    "hybridConnectionRelays": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Names of hybrid connection relays to connect app with."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "app": {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentId'))), parameters('managedEnvironmentId'), null())]",
                        "serverFarmId": "[parameters('serverFarmResourceId')]",
                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                        "httpsOnly": "[parameters('httpsOnly')]",
                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                        "siteConfig": "[parameters('siteConfig')]",
                        "clientCertEnabled": "[parameters('clientCertEnabled')]",
                        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                        "clientCertMode": "[parameters('clientCertMode')]",
                        "cloningInfo": "[parameters('cloningInfo')]",
                        "containerSize": "[parameters('containerSize')]",
                        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                        "enabled": "[parameters('enabled')]",
                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                        "hyperV": "[parameters('hyperV')]",
                        "redundancyMode": "[parameters('redundancyMode')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
                        "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                        "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                        "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]",
                        "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]"
                      }
                    },
                    "app_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_diagnosticSettings": {
                      "copy": {
                        "name": "app_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_roleAssignments": {
                      "copy": {
                        "name": "app_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_appsettings": {
                      "condition": "[or(or(not(empty(parameters('appSettingsKeyValuePairs'))), not(empty(parameters('appInsightResourceId')))), not(empty(parameters('storageAccountResourceId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-AppSettings', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "kind": {
                            "value": "[parameters('kind')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "storageAccountUseIdentityAuthentication": {
                            "value": "[parameters('storageAccountUseIdentityAuthentication')]"
                          },
                          "appInsightResourceId": {
                            "value": "[parameters('appInsightResourceId')]"
                          },
                          "appSettingsKeyValuePairs": {
                            "value": "[parameters('appSettingsKeyValuePairs')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "8777070640548664577"
                            },
                            "name": "Site App Settings",
                            "description": "This module deploys a Site App Setting.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "appInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                              }
                            },
                            "appSettingsKeyValuePairs": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "appInsight": {
                              "condition": "[not(empty(parameters('appInsightResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "subscriptionId": "[split(coalesce(parameters('appInsightResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(parameters('appInsightResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(parameters('appInsightResourceId'), 'dummyName'), '/'))]"
                            },
                            "storageAccount": {
                              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))]"
                            },
                            "appSettings": {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'appsettings')]",
                              "kind": "[parameters('kind')]",
                              "properties": "[union(coalesce(parameters('appSettingsKeyValuePairs'), createObject()), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), '2023-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), union(createObject('AzureWebJobsStorage__accountName', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), createObject('AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob)), createObject())), if(not(empty(parameters('appInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('appInsight').ConnectionString), createObject()))]",
                              "dependsOn": [
                                "app",
                                "appInsight",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "appsettings"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'appsettings')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_authsettingsv2": {
                      "condition": "[not(empty(parameters('authSettingV2Configuration')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-AuthSettingsV2', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "kind": {
                            "value": "[parameters('kind')]"
                          },
                          "authSettingV2Configuration": {
                            "value": "[coalesce(parameters('authSettingV2Configuration'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15126303852151434516"
                            },
                            "name": "Site Auth Settings V2 Config",
                            "description": "This module deploys a Site Auth Settings V2 Configuration.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "authSettingV2Configuration": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. The auth settings V2 configuration."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'authsettingsV2')]",
                              "kind": "[parameters('kind')]",
                              "properties": "[parameters('authSettingV2Configuration')]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "authsettingsV2"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'authsettingsV2')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_logssettings": {
                      "condition": "[not(empty(coalesce(parameters('logsConfiguration'), createObject())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-Logs', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "logsConfiguration": {
                            "value": "[parameters('logsConfiguration')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1719886395722436280"
                            },
                            "name": "Site logs Config",
                            "description": "This module deploys a Site logs Configuration.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent site resource."
                              }
                            },
                            "logsConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Required. The logs settings configuration."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "webSettings": {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'logs')]",
                              "kind": "string",
                              "properties": "[parameters('logsConfiguration')]",
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "logs"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'logs')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app",
                        "app_appsettings"
                      ]
                    },
                    "app_websettings": {
                      "condition": "[not(empty(coalesce(parameters('apiManagementConfiguration'), createObject())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-Web', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "apiManagementConfiguration": {
                            "value": "[parameters('apiManagementConfiguration')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "7195763436259190781"
                            },
                            "name": "Site Api Management Config",
                            "description": "This module deploys a Site Api Management Configuration.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent site resource."
                              }
                            },
                            "apiManagementConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Required. The web settings api management configuration."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "webSettings": {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'web')]",
                              "kind": "string",
                              "properties": "[parameters('apiManagementConfiguration')]",
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "web"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'web')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "extension_msdeploy": {
                      "condition": "[not(empty(parameters('msDeployConfiguration')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Extension-MSDeploy', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "msDeployConfiguration": {
                            "value": "[coalesce(parameters('msDeployConfiguration'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "2006653133597094766"
                            },
                            "name": "Site Deployment Extension ",
                            "description": "This module deploys a Site extension for MSDeploy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent site resource."
                              }
                            },
                            "msDeployConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Required. Sets the MSDeployment Properties."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "msdeploy": {
                              "type": "Microsoft.Web/sites/extensions",
                              "apiVersion": "2023-12-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'MSDeploy')]",
                              "kind": "MSDeploy",
                              "properties": "[parameters('msDeployConfiguration')]",
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the MSDeploy Package."
                              },
                              "value": "MSDeploy"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Site Extension."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), 'MSDeploy')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_slots": {
                      "copy": {
                        "name": "app_slots",
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
                          },
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "kind": {
                            "value": "[parameters('kind')]"
                          },
                          "serverFarmResourceId": {
                            "value": "[parameters('serverFarmResourceId')]"
                          },
                          "httpsOnly": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
                          },
                          "appServiceEnvironmentResourceId": {
                            "value": "[parameters('appServiceEnvironmentResourceId')]"
                          },
                          "clientAffinityEnabled": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
                          },
                          "managedIdentities": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
                          },
                          "keyVaultAccessIdentityResourceId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
                          },
                          "storageAccountRequired": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
                          },
                          "virtualNetworkSubnetId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetId'), parameters('virtualNetworkSubnetId'))]"
                          },
                          "siteConfig": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
                          },
                          "storageAccountResourceId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountResourceId'), parameters('storageAccountResourceId'))]"
                          },
                          "storageAccountUseIdentityAuthentication": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication'), parameters('storageAccountUseIdentityAuthentication'))]"
                          },
                          "appInsightResourceId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'appInsightResourceId'), parameters('appInsightResourceId'))]"
                          },
                          "authSettingV2Configuration": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'authSettingV2Configuration'), parameters('authSettingV2Configuration'))]"
                          },
                          "msDeployConfiguration": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'msDeployConfiguration'), parameters('msDeployConfiguration'))]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "appSettingsKeyValuePairs": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'appSettingsKeyValuePairs'), parameters('appSettingsKeyValuePairs'))]"
                          },
                          "basicPublishingCredentialsPolicies": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateEndpoints": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "clientCertEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
                          },
                          "clientCertExclusionPaths": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
                          },
                          "clientCertMode": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
                          },
                          "cloningInfo": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
                          },
                          "containerSize": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
                          },
                          "customDomainVerificationId": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
                          },
                          "dailyMemoryTimeQuota": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
                          },
                          "enabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "hostNameSslStates": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
                          },
                          "hyperV": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
                          },
                          "publicNetworkAccess": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
                          },
                          "redundancyMode": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
                          },
                          "vnetContentShareEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetContentShareEnabled')]"
                          },
                          "vnetImagePullEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetImagePullEnabled')]"
                          },
                          "vnetRouteAllEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetRouteAllEnabled')]"
                          },
                          "hybridConnectionRelays": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15729572124587777376"
                            },
                            "name": "Web/Function App Deployment Slots",
                            "description": "This module deploys a Web or Function App Deployment Slot.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "privateLinkServiceConnectionName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private link connection to create."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroup": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the Private DNS Zone Group."
                                        }
                                      },
                                      "privateDnsZoneGroupConfigs": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group config."
                                              }
                                            },
                                            "privateDnsZoneResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of the private DNS zone."
                                              }
                                            }
                                          }
                                        },
                                        "metadata": {
                                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                    }
                                  },
                                  "isManualConnection": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. If Manual Private Link Connection is required."
                                    }
                                  },
                                  "manualConnectionRequestMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "maxLength": 140,
                                    "metadata": {
                                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  },
                                  "resourceGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the slot."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "serverFarmResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the app service plan to use for the slot."
                              }
                            },
                            "httpsOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                              }
                            },
                            "clientAffinityEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If client affinity is enabled."
                              }
                            },
                            "appServiceEnvironmentResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the app service environment to use for this resource."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "keyVaultAccessIdentityResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                              }
                            },
                            "storageAccountRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Checks if Customer provided storage account is required."
                              }
                            },
                            "virtualNetworkSubnetId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                              }
                            },
                            "siteConfig": {
                              "type": "object",
                              "defaultValue": {
                                "alwaysOn": true
                              },
                              "metadata": {
                                "description": "Optional. The site config object."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "appInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                              }
                            },
                            "appSettingsKeyValuePairs": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                              }
                            },
                            "authSettingV2Configuration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The auth settings V2 configuration."
                              }
                            },
                            "msDeployConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The extension MSDeployment configuration."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "clientCertEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                              }
                            },
                            "clientCertExclusionPaths": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                              }
                            },
                            "clientCertMode": {
                              "type": "string",
                              "defaultValue": "Optional",
                              "allowedValues": [
                                "Optional",
                                "OptionalInteractiveUser",
                                "Required"
                              ],
                              "metadata": {
                                "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                              }
                            },
                            "cloningInfo": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If specified during app creation, the app is cloned from a source app."
                              }
                            },
                            "containerSize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Size of the function container."
                              }
                            },
                            "customDomainVerificationId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                              }
                            },
                            "dailyMemoryTimeQuota": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "hostNameSslStates": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                              }
                            },
                            "hyperV": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Hyper-V sandbox."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Allow or block all public traffic."
                              }
                            },
                            "redundancyMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "ActiveActive",
                                "Failover",
                                "GeoRedundant",
                                "Manual",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Site redundancy mode."
                              }
                            },
                            "basicPublishingCredentialsPolicies": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                              }
                            },
                            "vnetContentShareEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable accessing content over virtual network."
                              }
                            },
                            "vnetImagePullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable pulling image over Virtual Network."
                              }
                            },
                            "vnetRouteAllEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                              }
                            },
                            "hybridConnectionRelays": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Names of hybrid connection relays to connect app with."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('appName')]"
                            },
                            "slot": {
                              "type": "Microsoft.Web/sites/slots",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "serverFarmId": "[parameters('serverFarmResourceId')]",
                                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                "httpsOnly": "[parameters('httpsOnly')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                                "siteConfig": "[parameters('siteConfig')]",
                                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                                "clientCertMode": "[parameters('clientCertMode')]",
                                "cloningInfo": "[parameters('cloningInfo')]",
                                "containerSize": "[parameters('containerSize')]",
                                "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                                "enabled": "[parameters('enabled')]",
                                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                "hyperV": "[parameters('hyperV')]",
                                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                "redundancyMode": "[parameters('redundancyMode')]",
                                "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                                "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                                "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "slot_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "slot"
                              ]
                            },
                            "slot_diagnosticSettings": {
                              "copy": {
                                "name": "slot_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "slot"
                              ]
                            },
                            "slot_roleAssignments": {
                              "copy": {
                                "name": "slot_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "slot"
                              ]
                            },
                            "slot_appsettings": {
                              "condition": "[not(empty(parameters('appSettingsKeyValuePairs')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-{1}-Config-AppSettings', uniqueString(deployment().name, parameters('location')), parameters('name'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "storageAccountUseIdentityAuthentication": {
                                    "value": "[parameters('storageAccountUseIdentityAuthentication')]"
                                  },
                                  "appInsightResourceId": {
                                    "value": "[parameters('appInsightResourceId')]"
                                  },
                                  "appSettingsKeyValuePairs": {
                                    "value": "[parameters('appSettingsKeyValuePairs')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "7111332561212908044"
                                    },
                                    "name": "Site Slot App Settings",
                                    "description": "This module deploys a Site Slot App Setting.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Slot name to be configured."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "storageAccountUseIdentityAuthentication": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                      }
                                    },
                                    "appInsightResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                      }
                                    },
                                    "appSettingsKeyValuePairs": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app::slot": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites/slots",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    },
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "appInsight": {
                                      "condition": "[not(empty(parameters('appInsightResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Insights/components",
                                      "apiVersion": "2020-02-02",
                                      "subscriptionId": "[split(coalesce(parameters('appInsightResourceId'), '//'), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('appInsightResourceId'), '////'), '/')[4]]",
                                      "name": "[last(split(coalesce(parameters('appInsightResourceId'), 'dummyName'), '/'))]"
                                    },
                                    "storageAccount": {
                                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-01-01",
                                      "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]]",
                                      "name": "[last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))]"
                                    },
                                    "slotSettings": {
                                      "type": "Microsoft.Web/sites/slots/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'appsettings')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[union(coalesce(parameters('appSettingsKeyValuePairs'), createObject()), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), '2023-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), union(createObject('AzureWebJobsStorage__accountName', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), createObject('AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob)), createObject())), if(not(empty(parameters('appInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('appInsight').ConnectionString), createObject()))]",
                                      "dependsOn": [
                                        "appInsight",
                                        "app::slot",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot config."
                                      },
                                      "value": "appsettings"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'appsettings')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the slot config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_authsettingsv2": {
                              "condition": "[not(empty(parameters('authSettingV2Configuration')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-{1}-Config-AuthSettingsV2', uniqueString(deployment().name, parameters('location')), parameters('name'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "authSettingV2Configuration": {
                                    "value": "[coalesce(parameters('authSettingV2Configuration'), createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "3412962465179136371"
                                    },
                                    "name": "Site Slot Auth Settings V2 Config",
                                    "description": "This module deploys a Site Auth Settings V2 Configuration.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Slot name to be configured."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "authSettingV2Configuration": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. The auth settings V2 configuration."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'authsettingsV2')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[parameters('authSettingV2Configuration')]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot config."
                                      },
                                      "value": "authsettingsV2"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'authsettingsV2')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the slot config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_basicPublishingCredentialsPolicies": {
                              "copy": {
                                "name": "slot_basicPublishingCredentialsPolicies",
                                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                                  },
                                  "allow": {
                                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "6875784212879192632"
                                    },
                                    "name": "Web Site Slot Basic Publishing Credentials Policies",
                                    "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "scm",
                                        "ftp"
                                      ],
                                      "metadata": {
                                        "description": "Required. The name of the resource."
                                      }
                                    },
                                    "allow": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "allow": "[parameters('allow')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the basic publishing credential policy."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the basic publishing credential policy."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2022-09-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_hybridConnectionRelays": {
                              "copy": {
                                "name": "slot_hybridConnectionRelays",
                                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "hybridConnectionResourceId": {
                                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].resourceId]"
                                  },
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sendKeyName": {
                                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "4120073340411344208"
                                    },
                                    "name": "Web/Function Apps Slot Hybrid Connection Relay",
                                    "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "hybridConnectionResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                                      }
                                    },
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "sendKeyName": {
                                      "type": "string",
                                      "defaultValue": "defaultSender",
                                      "metadata": {
                                        "description": "Optional. Name of the authorization rule send key to use."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                      "properties": {
                                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                                        "sendKeyName": "[parameters('sendKeyName')]",
                                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the hybrid connection relay.."
                                      },
                                      "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the hybrid connection relay."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the resource was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_extensionMSdeploy": {
                              "condition": "[not(empty(parameters('msDeployConfiguration')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Extension-MSDeploy', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "msDeployConfiguration": {
                                    "value": "[coalesce(parameters('msDeployConfiguration'), createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2006653133597094766"
                                    },
                                    "name": "Site Deployment Extension ",
                                    "description": "This module deploys a Site extension for MSDeploy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent site resource."
                                      }
                                    },
                                    "msDeployConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Required. Sets the MSDeployment Properties."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "msdeploy": {
                                      "type": "Microsoft.Web/sites/extensions",
                                      "apiVersion": "2023-12-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'MSDeploy')]",
                                      "kind": "MSDeploy",
                                      "properties": "[parameters('msDeployConfiguration')]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the MSDeploy Package."
                                      },
                                      "value": "MSDeploy"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Site Extension."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), 'MSDeploy')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "slot_privateEndpoints": {
                              "copy": {
                                "name": "slot_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1277254088602407590"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "5805178546717255803"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfig": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').networkInterfaces]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the slot."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the slot."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the slot was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('slot', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('slot', '2022-09-01', 'full').location]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "metadata": {
                                "description": "The private endpoints of the slot."
                              },
                              "copy": {
                                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                                "input": {
                                  "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                                  "customDnsConfig": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                                  "networkInterfaceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_basicPublishingCredentialsPolicies": {
                      "copy": {
                        "name": "app_basicPublishingCredentialsPolicies",
                        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "webAppName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                          },
                          "allow": {
                            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5861139703409371797"
                            },
                            "name": "Web Site Basic Publishing Credentials Policies",
                            "description": "This module deploys a Web Site Basic Publishing Credentials Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "scm",
                                "ftp"
                              ],
                              "metadata": {
                                "description": "Required. The name of the resource."
                              }
                            },
                            "allow": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Set to true to enable or false to disable a publishing method."
                              }
                            },
                            "webAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "allow": "[parameters('allow')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the basic publishing credential policy."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the basic publishing credential policy."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the basic publishing credential policy was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2022-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_hybridConnectionRelays": {
                      "copy": {
                        "name": "app_hybridConnectionRelays",
                        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hybridConnectionResourceId": {
                            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].resourceId]"
                          },
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "sendKeyName": {
                            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "7661794789768148013"
                            },
                            "name": "Web/Function Apps Hybrid Connection Relay",
                            "description": "This module deploys a Site Hybrid Connection Namespace Relay.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "hybridConnectionResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the relay namespace hybrid connection."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "sendKeyName": {
                              "type": "string",
                              "defaultValue": "defaultSender",
                              "metadata": {
                                "description": "Optional. Name of the authorization rule send key to use."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                              "properties": {
                                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                                "sendKeyName": "[parameters('sendKeyName')]",
                                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the hybrid connection relay.."
                              },
                              "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the hybrid connection relay."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the resource was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_privateEndpoints": {
                      "copy": {
                        "name": "app_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1277254088602407590"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "5805178546717255803"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                            },
                            "customDnsConfig": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').networkInterfaces]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the site."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the site."
                      },
                      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                    },
                    "slots": {
                      "type": "array",
                      "metadata": {
                        "description": "The list of the slots."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]"
                      }
                    },
                    "slotResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The list of the slot resource ids."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the site was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('app', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "slotSystemAssignedMIPrincipalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity of slots."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.systemAssignedMIPrincipalId.value]"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('app', '2022-09-01', 'full').location]"
                    },
                    "defaultHostname": {
                      "type": "string",
                      "metadata": {
                        "description": "Default hostname of the app."
                      },
                      "value": "[reference('app').defaultHostName]"
                    },
                    "customDomainVerificationId": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                      },
                      "value": "[reference('app').customDomainVerificationId]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "metadata": {
                        "description": "The private endpoints of the site."
                      },
                      "copy": {
                        "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                        "input": {
                          "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                          "customDnsConfig": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                          "networkInterfaceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                        }
                      }
                    },
                    "slotPrivateEndpoints": {
                      "type": "array",
                      "metadata": {
                        "description": "The private endpoints of the slots."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'app-service-plan')]",
                "[resourceId('Microsoft.Resources/deployments', 'monitoring')]",
                "[resourceId('Microsoft.Resources/deployments', 'staridentity')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2025-04-01",
              "name": "star-frontend",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}frontend-{1}', variables('abbrs').webSitesAppService, variables('resourceToken'))]"
                  },
                  "kind": {
                    "value": "app,linux"
                  },
                  "serverFarmResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'app-service-plan'), '2025-04-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', 'star-frontend'))]"
                  },
                  "managedIdentities": {
                    "value": {
                      "systemAssigned": false,
                      "userAssignedResourceIds": [
                        "[reference(resourceId('Microsoft.Resources/deployments', 'staridentity'), '2025-04-01').outputs.resourceId.value]"
                      ]
                    }
                  },
                  "siteConfig": {
                    "value": {
                      "linuxFxVersion": "NODE|18-lts",
                      "appSettings": [
                        {
                          "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                          "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2025-04-01').outputs.applicationInsightsConnectionString.value]"
                        },
                        {
                          "name": "AZURE_CLIENT_ID",
                          "value": "[reference(resourceId('Microsoft.Resources/deployments', 'staridentity'), '2025-04-01').outputs.clientId.value]"
                        },
                        {
                          "name": "NEXT_PUBLIC_API_URL",
                          "value": "[format('https://{0}/api/v1', reference(resourceId('Microsoft.Resources/deployments', 'star-backend'), '2025-04-01').outputs.defaultHostname.value)]"
                        },
                        {
                          "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                          "value": "true"
                        },
                        {
                          "name": "ENABLE_ORYX_BUILD",
                          "value": "true"
                        }
                      ]
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "14939100928164125813"
                    },
                    "name": "Web/Function Apps",
                    "description": "This module deploys a Web or Function App.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "privateLinkServiceConnectionName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private link connection to create."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroup": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the Private DNS Zone Group."
                                }
                              },
                              "privateDnsZoneGroupConfigs": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group config."
                                      }
                                    },
                                    "privateDnsZoneResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of the private DNS zone."
                                      }
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone group to configure for the private endpoint."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. If Manual Private Link Connection is required."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          },
                          "resourceGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the site."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "functionapp",
                        "functionapp,linux",
                        "functionapp,workflowapp",
                        "functionapp,workflowapp,linux",
                        "functionapp,linux,container",
                        "functionapp,linux,container,azurecontainerapps",
                        "app,linux",
                        "app",
                        "linux,api",
                        "api",
                        "app,linux,container",
                        "app,container,windows"
                      ],
                      "metadata": {
                        "description": "Required. Type of site to deploy."
                      }
                    },
                    "serverFarmResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the app service plan to use for the site."
                      }
                    },
                    "managedEnvironmentId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the customers selected Managed Environment on which to host this app."
                      }
                    },
                    "httpsOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
                      }
                    },
                    "clientAffinityEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If client affinity is enabled."
                      }
                    },
                    "appServiceEnvironmentResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the app service environment to use for this resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "keyVaultAccessIdentityResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                      }
                    },
                    "storageAccountRequired": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Checks if Customer provided storage account is required."
                      }
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                      }
                    },
                    "vnetContentShareEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable accessing content over virtual network."
                      }
                    },
                    "vnetImagePullEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable pulling image over Virtual Network."
                      }
                    },
                    "vnetRouteAllEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                      }
                    },
                    "scmSiteAlsoStopped": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Stop SCM (KUDU) site when the app is stopped."
                      }
                    },
                    "siteConfig": {
                      "type": "object",
                      "defaultValue": {
                        "alwaysOn": true
                      },
                      "metadata": {
                        "description": "Optional. The site config object."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                      }
                    },
                    "storageAccountUseIdentityAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                      }
                    },
                    "apiManagementConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The web settings api management configuration."
                      }
                    },
                    "msDeployConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The extension MSDeployment configuration."
                      }
                    },
                    "appInsightResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    },
                    "appSettingsKeyValuePairs": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                      }
                    },
                    "authSettingV2Configuration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The auth settings V2 configuration."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "logsConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The logs settings configuration."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "slots": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for deployment slots for an app."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "clientCertEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                      }
                    },
                    "clientCertExclusionPaths": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                      }
                    },
                    "clientCertMode": {
                      "type": "string",
                      "defaultValue": "Optional",
                      "allowedValues": [
                        "Optional",
                        "OptionalInteractiveUser",
                        "Required"
                      ],
                      "metadata": {
                        "description": "Optional. This composes with ClientCertEnabled setting.\n- ClientCertEnabled=false means ClientCert is ignored.\n- ClientCertEnabled=true and ClientCertMode=Required means ClientCert is required.\n- ClientCertEnabled=true and ClientCertMode=Optional means ClientCert is optional or accepted.\n"
                      }
                    },
                    "cloningInfo": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. If specified during app creation, the app is cloned from a source app."
                      }
                    },
                    "containerSize": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Size of the function container."
                      }
                    },
                    "dailyMemoryTimeQuota": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                      }
                    },
                    "enabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                      }
                    },
                    "hostNameSslStates": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                      }
                    },
                    "hyperV": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Hyper-V sandbox."
                      }
                    },
                    "redundancyMode": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "ActiveActive",
                        "Failover",
                        "GeoRedundant",
                        "Manual",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. Site redundancy mode."
                      }
                    },
                    "basicPublishingCredentialsPolicies": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The site publishing credential policy names which are associated with the sites."
                      }
                    },
                    "hybridConnectionRelays": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Names of hybrid connection relays to connect app with."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.web-site.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "app": {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "managedEnvironmentId": "[if(not(empty(parameters('managedEnvironmentId'))), parameters('managedEnvironmentId'), null())]",
                        "serverFarmId": "[parameters('serverFarmResourceId')]",
                        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                        "httpsOnly": "[parameters('httpsOnly')]",
                        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                        "storageAccountRequired": "[parameters('storageAccountRequired')]",
                        "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                        "siteConfig": "[parameters('siteConfig')]",
                        "clientCertEnabled": "[parameters('clientCertEnabled')]",
                        "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                        "clientCertMode": "[parameters('clientCertMode')]",
                        "cloningInfo": "[parameters('cloningInfo')]",
                        "containerSize": "[parameters('containerSize')]",
                        "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                        "enabled": "[parameters('enabled')]",
                        "hostNameSslStates": "[parameters('hostNameSslStates')]",
                        "hyperV": "[parameters('hyperV')]",
                        "redundancyMode": "[parameters('redundancyMode')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', 'Enabled'))]",
                        "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                        "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                        "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]",
                        "scmSiteAlsoStopped": "[parameters('scmSiteAlsoStopped')]"
                      }
                    },
                    "app_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_diagnosticSettings": {
                      "copy": {
                        "name": "app_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_roleAssignments": {
                      "copy": {
                        "name": "app_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Web/sites/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_appsettings": {
                      "condition": "[or(or(not(empty(parameters('appSettingsKeyValuePairs'))), not(empty(parameters('appInsightResourceId')))), not(empty(parameters('storageAccountResourceId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-AppSettings', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "kind": {
                            "value": "[parameters('kind')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "storageAccountUseIdentityAuthentication": {
                            "value": "[parameters('storageAccountUseIdentityAuthentication')]"
                          },
                          "appInsightResourceId": {
                            "value": "[parameters('appInsightResourceId')]"
                          },
                          "appSettingsKeyValuePairs": {
                            "value": "[parameters('appSettingsKeyValuePairs')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "8777070640548664577"
                            },
                            "name": "Site App Settings",
                            "description": "This module deploys a Site App Setting.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "appInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                              }
                            },
                            "appSettingsKeyValuePairs": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "appInsight": {
                              "condition": "[not(empty(parameters('appInsightResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2020-02-02",
                              "subscriptionId": "[split(coalesce(parameters('appInsightResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(parameters('appInsightResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(parameters('appInsightResourceId'), 'dummyName'), '/'))]"
                            },
                            "storageAccount": {
                              "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))]"
                            },
                            "appSettings": {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'appsettings')]",
                              "kind": "[parameters('kind')]",
                              "properties": "[union(coalesce(parameters('appSettingsKeyValuePairs'), createObject()), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), '2023-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), union(createObject('AzureWebJobsStorage__accountName', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), createObject('AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob)), createObject())), if(not(empty(parameters('appInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('appInsight').ConnectionString), createObject()))]",
                              "dependsOn": [
                                "app",
                                "appInsight",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "appsettings"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'appsettings')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_authsettingsv2": {
                      "condition": "[not(empty(parameters('authSettingV2Configuration')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-AuthSettingsV2', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "kind": {
                            "value": "[parameters('kind')]"
                          },
                          "authSettingV2Configuration": {
                            "value": "[coalesce(parameters('authSettingV2Configuration'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15126303852151434516"
                            },
                            "name": "Site Auth Settings V2 Config",
                            "description": "This module deploys a Site Auth Settings V2 Configuration.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "authSettingV2Configuration": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. The auth settings V2 configuration."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'authsettingsV2')]",
                              "kind": "[parameters('kind')]",
                              "properties": "[parameters('authSettingV2Configuration')]"
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "authsettingsV2"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'authsettingsV2')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_logssettings": {
                      "condition": "[not(empty(coalesce(parameters('logsConfiguration'), createObject())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-Logs', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "logsConfiguration": {
                            "value": "[parameters('logsConfiguration')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1719886395722436280"
                            },
                            "name": "Site logs Config",
                            "description": "This module deploys a Site logs Configuration.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent site resource."
                              }
                            },
                            "logsConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Required. The logs settings configuration."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "webSettings": {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'logs')]",
                              "kind": "string",
                              "properties": "[parameters('logsConfiguration')]",
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "logs"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'logs')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app",
                        "app_appsettings"
                      ]
                    },
                    "app_websettings": {
                      "condition": "[not(empty(coalesce(parameters('apiManagementConfiguration'), createObject())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Config-Web', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "apiManagementConfiguration": {
                            "value": "[parameters('apiManagementConfiguration')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "7195763436259190781"
                            },
                            "name": "Site Api Management Config",
                            "description": "This module deploys a Site Api Management Configuration.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent site resource."
                              }
                            },
                            "apiManagementConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Required. The web settings api management configuration."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "webSettings": {
                              "type": "Microsoft.Web/sites/config",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'web')]",
                              "kind": "string",
                              "properties": "[parameters('apiManagementConfiguration')]",
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the site config."
                              },
                              "value": "web"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the site config."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/config', parameters('appName'), 'web')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "extension_msdeploy": {
                      "condition": "[not(empty(parameters('msDeployConfiguration')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Extension-MSDeploy', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "msDeployConfiguration": {
                            "value": "[coalesce(parameters('msDeployConfiguration'), createObject())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "2006653133597094766"
                            },
                            "name": "Site Deployment Extension ",
                            "description": "This module deploys a Site extension for MSDeploy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent site resource."
                              }
                            },
                            "msDeployConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Required. Sets the MSDeployment Properties."
                              }
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('appName')]"
                            },
                            "msdeploy": {
                              "type": "Microsoft.Web/sites/extensions",
                              "apiVersion": "2023-12-01",
                              "name": "[format('{0}/{1}', parameters('appName'), 'MSDeploy')]",
                              "kind": "MSDeploy",
                              "properties": "[parameters('msDeployConfiguration')]",
                              "dependsOn": [
                                "app"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the MSDeploy Package."
                              },
                              "value": "MSDeploy"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Site Extension."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), 'MSDeploy')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the site config was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_slots": {
                      "copy": {
                        "name": "app_slots",
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('slots'), createArray())[copyIndex()].name]"
                          },
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "kind": {
                            "value": "[parameters('kind')]"
                          },
                          "serverFarmResourceId": {
                            "value": "[parameters('serverFarmResourceId')]"
                          },
                          "httpsOnly": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'httpsOnly'), parameters('httpsOnly'))]"
                          },
                          "appServiceEnvironmentResourceId": {
                            "value": "[parameters('appServiceEnvironmentResourceId')]"
                          },
                          "clientAffinityEnabled": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientAffinityEnabled'), parameters('clientAffinityEnabled'))]"
                          },
                          "managedIdentities": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'managedIdentities'), parameters('managedIdentities'))]"
                          },
                          "keyVaultAccessIdentityResourceId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'keyVaultAccessIdentityResourceId'), parameters('keyVaultAccessIdentityResourceId'))]"
                          },
                          "storageAccountRequired": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountRequired'), parameters('storageAccountRequired'))]"
                          },
                          "virtualNetworkSubnetId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'virtualNetworkSubnetId'), parameters('virtualNetworkSubnetId'))]"
                          },
                          "siteConfig": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'siteConfig'), parameters('siteConfig'))]"
                          },
                          "storageAccountResourceId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountResourceId'), parameters('storageAccountResourceId'))]"
                          },
                          "storageAccountUseIdentityAuthentication": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'storageAccountUseIdentityAuthentication'), parameters('storageAccountUseIdentityAuthentication'))]"
                          },
                          "appInsightResourceId": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'appInsightResourceId'), parameters('appInsightResourceId'))]"
                          },
                          "authSettingV2Configuration": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'authSettingV2Configuration'), parameters('authSettingV2Configuration'))]"
                          },
                          "msDeployConfiguration": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'msDeployConfiguration'), parameters('msDeployConfiguration'))]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'diagnosticSettings')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "appSettingsKeyValuePairs": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'appSettingsKeyValuePairs'), parameters('appSettingsKeyValuePairs'))]"
                          },
                          "basicPublishingCredentialsPolicies": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'basicPublishingCredentialsPolicies'), parameters('basicPublishingCredentialsPolicies'))]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateEndpoints": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'), createArray())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "clientCertEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertEnabled')]"
                          },
                          "clientCertExclusionPaths": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertExclusionPaths')]"
                          },
                          "clientCertMode": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'clientCertMode')]"
                          },
                          "cloningInfo": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'cloningInfo')]"
                          },
                          "containerSize": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'containerSize')]"
                          },
                          "customDomainVerificationId": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'customDomainVerificationId')]"
                          },
                          "dailyMemoryTimeQuota": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'dailyMemoryTimeQuota')]"
                          },
                          "enabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enabled')]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "hostNameSslStates": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hostNameSslStates')]"
                          },
                          "hyperV": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hyperV')]"
                          },
                          "publicNetworkAccess": {
                            "value": "[coalesce(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'publicNetworkAccess'), if(or(not(empty(tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'privateEndpoints'))), not(empty(parameters('privateEndpoints')))), 'Disabled', 'Enabled'))]"
                          },
                          "redundancyMode": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'redundancyMode')]"
                          },
                          "vnetContentShareEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetContentShareEnabled')]"
                          },
                          "vnetImagePullEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetImagePullEnabled')]"
                          },
                          "vnetRouteAllEnabled": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'vnetRouteAllEnabled')]"
                          },
                          "hybridConnectionRelays": {
                            "value": "[tryGet(coalesce(parameters('slots'), createArray())[copyIndex()], 'hybridConnectionRelays')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15729572124587777376"
                            },
                            "name": "Web/Function App Deployment Slots",
                            "description": "This module deploys a Web or Function App Deployment Slot.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "privateLinkServiceConnectionName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private link connection to create."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroup": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the Private DNS Zone Group."
                                        }
                                      },
                                      "privateDnsZoneGroupConfigs": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group config."
                                              }
                                            },
                                            "privateDnsZoneResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of the private DNS zone."
                                              }
                                            }
                                          }
                                        },
                                        "metadata": {
                                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                    }
                                  },
                                  "isManualConnection": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. If Manual Private Link Connection is required."
                                    }
                                  },
                                  "manualConnectionRequestMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "maxLength": 140,
                                    "metadata": {
                                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  },
                                  "resourceGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the slot."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "functionapp",
                                "functionapp,linux",
                                "functionapp,workflowapp",
                                "functionapp,workflowapp,linux",
                                "functionapp,linux,container",
                                "functionapp,linux,container,azurecontainerapps",
                                "app,linux",
                                "app",
                                "linux,api",
                                "api",
                                "app,linux,container",
                                "app,container,windows"
                              ],
                              "metadata": {
                                "description": "Required. Type of site to deploy."
                              }
                            },
                            "serverFarmResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the app service plan to use for the slot."
                              }
                            },
                            "httpsOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Configures a slot to accept only HTTPS requests. Issues redirect for HTTP requests."
                              }
                            },
                            "clientAffinityEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If client affinity is enabled."
                              }
                            },
                            "appServiceEnvironmentResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the app service environment to use for this resource."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "keyVaultAccessIdentityResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the assigned identity to be used to access a key vault with."
                              }
                            },
                            "storageAccountRequired": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Checks if Customer provided storage account is required."
                              }
                            },
                            "virtualNetworkSubnetId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                              }
                            },
                            "siteConfig": {
                              "type": "object",
                              "defaultValue": {
                                "alwaysOn": true
                              },
                              "metadata": {
                                "description": "Optional. The site config object."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                              }
                            },
                            "storageAccountUseIdentityAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                              }
                            },
                            "appInsightResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource ID of the app insight to leverage for this resource."
                              }
                            },
                            "appSettingsKeyValuePairs": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The app settings-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                              }
                            },
                            "authSettingV2Configuration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The auth settings V2 configuration."
                              }
                            },
                            "msDeployConfiguration": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The extension MSDeployment configuration."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "clientCertEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable client certificate authentication (TLS mutual authentication)."
                              }
                            },
                            "clientCertExclusionPaths": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Client certificate authentication comma-separated exclusion paths."
                              }
                            },
                            "clientCertMode": {
                              "type": "string",
                              "defaultValue": "Optional",
                              "allowedValues": [
                                "Optional",
                                "OptionalInteractiveUser",
                                "Required"
                              ],
                              "metadata": {
                                "description": "Optional. This composes with ClientCertEnabled setting.</p>- ClientCertEnabled: false means ClientCert is ignored.</p>- ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.</p>- ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted."
                              }
                            },
                            "cloningInfo": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. If specified during app creation, the app is cloned from a source app."
                              }
                            },
                            "containerSize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Size of the function container."
                              }
                            },
                            "customDomainVerificationId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                              }
                            },
                            "dailyMemoryTimeQuota": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Maximum allowed daily memory-time quota (applicable on dynamic apps only)."
                              }
                            },
                            "enabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Setting this value to false disables the app (takes the app offline)."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "hostNameSslStates": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Hostname SSL states are used to manage the SSL bindings for app's hostnames."
                              }
                            },
                            "hyperV": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Hyper-V sandbox."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Allow or block all public traffic."
                              }
                            },
                            "redundancyMode": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "ActiveActive",
                                "Failover",
                                "GeoRedundant",
                                "Manual",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Site redundancy mode."
                              }
                            },
                            "basicPublishingCredentialsPolicies": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The site publishing credential policy names which are associated with the site slot."
                              }
                            },
                            "vnetContentShareEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable accessing content over virtual network."
                              }
                            },
                            "vnetImagePullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. To enable pulling image over Virtual Network."
                              }
                            },
                            "vnetRouteAllEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied."
                              }
                            },
                            "hybridConnectionRelays": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Names of hybrid connection relays to connect app with."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "App Compliance Automation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f37683f-2463-46b6-9ce7-9b788b988ba2')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
                            }
                          },
                          "resources": {
                            "app": {
                              "existing": true,
                              "type": "Microsoft.Web/sites",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('appName')]"
                            },
                            "slot": {
                              "type": "Microsoft.Web/sites/slots",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('appName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "serverFarmId": "[parameters('serverFarmResourceId')]",
                                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                                "httpsOnly": "[parameters('httpsOnly')]",
                                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentResourceId'))), createObject('id', parameters('appServiceEnvironmentResourceId')), null())]",
                                "storageAccountRequired": "[parameters('storageAccountRequired')]",
                                "keyVaultReferenceIdentity": "[parameters('keyVaultAccessIdentityResourceId')]",
                                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]",
                                "siteConfig": "[parameters('siteConfig')]",
                                "clientCertEnabled": "[parameters('clientCertEnabled')]",
                                "clientCertExclusionPaths": "[parameters('clientCertExclusionPaths')]",
                                "clientCertMode": "[parameters('clientCertMode')]",
                                "cloningInfo": "[parameters('cloningInfo')]",
                                "containerSize": "[parameters('containerSize')]",
                                "customDomainVerificationId": "[parameters('customDomainVerificationId')]",
                                "dailyMemoryTimeQuota": "[parameters('dailyMemoryTimeQuota')]",
                                "enabled": "[parameters('enabled')]",
                                "hostNameSslStates": "[parameters('hostNameSslStates')]",
                                "hyperV": "[parameters('hyperV')]",
                                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                                "redundancyMode": "[parameters('redundancyMode')]",
                                "vnetContentShareEnabled": "[parameters('vnetContentShareEnabled')]",
                                "vnetImagePullEnabled": "[parameters('vnetImagePullEnabled')]",
                                "vnetRouteAllEnabled": "[parameters('vnetRouteAllEnabled')]"
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "slot_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "slot"
                              ]
                            },
                            "slot_diagnosticSettings": {
                              "copy": {
                                "name": "slot_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "slot"
                              ]
                            },
                            "slot_roleAssignments": {
                              "copy": {
                                "name": "slot_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Web/sites/{0}/slots/{1}', parameters('appName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "slot"
                              ]
                            },
                            "slot_appsettings": {
                              "condition": "[not(empty(parameters('appSettingsKeyValuePairs')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-{1}-Config-AppSettings', uniqueString(deployment().name, parameters('location')), parameters('name'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "storageAccountUseIdentityAuthentication": {
                                    "value": "[parameters('storageAccountUseIdentityAuthentication')]"
                                  },
                                  "appInsightResourceId": {
                                    "value": "[parameters('appInsightResourceId')]"
                                  },
                                  "appSettingsKeyValuePairs": {
                                    "value": "[parameters('appSettingsKeyValuePairs')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "7111332561212908044"
                                    },
                                    "name": "Site Slot App Settings",
                                    "description": "This module deploys a Site Slot App Setting.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Slot name to be configured."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Required if app of kind functionapp. Resource ID of the storage account to manage triggers and logging function executions."
                                      }
                                    },
                                    "storageAccountUseIdentityAuthentication": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the provided storage account requires Identity based authentication ('allowSharedKeyAccess' is set to false). When set to true, the minimum role assignment required for the App Service Managed Identity to the storage account is 'Storage Blob Data Owner'."
                                      }
                                    },
                                    "appInsightResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                                      }
                                    },
                                    "appSettingsKeyValuePairs": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The app settings key-value pairs except for AzureWebJobsStorage, AzureWebJobsDashboard, APPINSIGHTS_INSTRUMENTATIONKEY and APPLICATIONINSIGHTS_CONNECTION_STRING."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app::slot": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites/slots",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), parameters('slotName'))]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    },
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "appInsight": {
                                      "condition": "[not(empty(parameters('appInsightResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Insights/components",
                                      "apiVersion": "2020-02-02",
                                      "subscriptionId": "[split(coalesce(parameters('appInsightResourceId'), '//'), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('appInsightResourceId'), '////'), '/')[4]]",
                                      "name": "[last(split(coalesce(parameters('appInsightResourceId'), 'dummyName'), '/'))]"
                                    },
                                    "storageAccount": {
                                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-01-01",
                                      "subscriptionId": "[split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]]",
                                      "name": "[last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))]"
                                    },
                                    "slotSettings": {
                                      "type": "Microsoft.Web/sites/slots/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'appsettings')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[union(coalesce(parameters('appSettingsKeyValuePairs'), createObject()), if(and(not(empty(parameters('storageAccountResourceId'))), not(parameters('storageAccountUseIdentityAuthentication'))), createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('storageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), '2023-01-01').keys[0].value, environment().suffixes.storage)), if(and(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountUseIdentityAuthentication')), union(createObject('AzureWebJobsStorage__accountName', last(split(coalesce(parameters('storageAccountResourceId'), 'dummyName'), '/'))), createObject('AzureWebJobsStorage__blobServiceUri', reference('storageAccount').primaryEndpoints.blob)), createObject())), if(not(empty(parameters('appInsightResourceId'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference('appInsight').ConnectionString), createObject()))]",
                                      "dependsOn": [
                                        "appInsight",
                                        "app::slot",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot config."
                                      },
                                      "value": "appsettings"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'appsettings')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the slot config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_authsettingsv2": {
                              "condition": "[not(empty(parameters('authSettingV2Configuration')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-{1}-Config-AuthSettingsV2', uniqueString(deployment().name, parameters('location')), parameters('name'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "kind": {
                                    "value": "[parameters('kind')]"
                                  },
                                  "authSettingV2Configuration": {
                                    "value": "[coalesce(parameters('authSettingV2Configuration'), createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "3412962465179136371"
                                    },
                                    "name": "Site Slot Auth Settings V2 Config",
                                    "description": "This module deploys a Site Auth Settings V2 Configuration.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent site resource. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Slot name to be configured."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "allowedValues": [
                                        "functionapp",
                                        "functionapp,linux",
                                        "functionapp,workflowapp",
                                        "functionapp,workflowapp,linux",
                                        "functionapp,linux,container",
                                        "functionapp,linux,container,azurecontainerapps",
                                        "app,linux",
                                        "app",
                                        "linux,api",
                                        "api",
                                        "app,linux,container",
                                        "app,container,windows"
                                      ],
                                      "metadata": {
                                        "description": "Required. Type of site to deploy."
                                      }
                                    },
                                    "authSettingV2Configuration": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. The auth settings V2 configuration."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots/config",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), 'authsettingsV2')]",
                                      "kind": "[parameters('kind')]",
                                      "properties": "[parameters('authSettingV2Configuration')]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the slot config."
                                      },
                                      "value": "authsettingsV2"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the slot config."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/config', parameters('appName'), parameters('slotName'), 'authsettingsV2')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the slot config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_basicPublishingCredentialsPolicies": {
                              "copy": {
                                "name": "slot_basicPublishingCredentialsPolicies",
                                "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                                  },
                                  "allow": {
                                    "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "6875784212879192632"
                                    },
                                    "name": "Web Site Slot Basic Publishing Credentials Policies",
                                    "description": "This module deploys a Web Site Slot Basic Publishing Credentials Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "allowedValues": [
                                        "scm",
                                        "ftp"
                                      ],
                                      "metadata": {
                                        "description": "Required. The name of the resource."
                                      }
                                    },
                                    "allow": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Set to true to enable or false to disable a publishing method."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site slot. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('appName'), parameters('slotName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "allow": "[parameters('allow')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the basic publishing credential policy."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the basic publishing credential policy."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the basic publishing credential policy was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference(resourceId('Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies', parameters('appName'), parameters('slotName'), parameters('name')), '2022-09-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_hybridConnectionRelays": {
                              "copy": {
                                "name": "slot_hybridConnectionRelays",
                                "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Slot-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "hybridConnectionResourceId": {
                                    "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].resourceId]"
                                  },
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "slotName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sendKeyName": {
                                    "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "4120073340411344208"
                                    },
                                    "name": "Web/Function Apps Slot Hybrid Connection Relay",
                                    "description": "This module deploys a Site Slot Hybrid Connection Namespace Relay.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "hybridConnectionResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the relay namespace hybrid connection."
                                      }
                                    },
                                    "slotName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the site slot. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "sendKeyName": {
                                      "type": "string",
                                      "defaultValue": "defaultSender",
                                      "metadata": {
                                        "description": "Optional. Name of the authorization rule send key to use."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                      "properties": {
                                        "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                        "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                        "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                        "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                        "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                                        "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                                        "sendKeyName": "[parameters('sendKeyName')]",
                                        "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the hybrid connection relay.."
                                      },
                                      "value": "[format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the hybrid connection relay."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2], split(format('{0}/{1}/{2}/{3}', parameters('appName'), parameters('slotName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[3])]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the resource was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            },
                            "slot_extensionMSdeploy": {
                              "condition": "[not(empty(parameters('msDeployConfiguration')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Site-Extension-MSDeploy', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "appName": {
                                    "value": "[parameters('appName')]"
                                  },
                                  "msDeployConfiguration": {
                                    "value": "[coalesce(parameters('msDeployConfiguration'), createObject())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2006653133597094766"
                                    },
                                    "name": "Site Deployment Extension ",
                                    "description": "This module deploys a Site extension for MSDeploy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "appName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent site resource."
                                      }
                                    },
                                    "msDeployConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Required. Sets the MSDeployment Properties."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "app": {
                                      "existing": true,
                                      "type": "Microsoft.Web/sites",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('appName')]"
                                    },
                                    "msdeploy": {
                                      "type": "Microsoft.Web/sites/extensions",
                                      "apiVersion": "2023-12-01",
                                      "name": "[format('{0}/{1}', parameters('appName'), 'MSDeploy')]",
                                      "kind": "MSDeploy",
                                      "properties": "[parameters('msDeployConfiguration')]",
                                      "dependsOn": [
                                        "app"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the MSDeploy Package."
                                      },
                                      "value": "MSDeploy"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Site Extension."
                                      },
                                      "value": "[resourceId('Microsoft.Web/sites/extensions', parameters('appName'), 'MSDeploy')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the site config was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app"
                              ]
                            },
                            "slot_privateEndpoints": {
                              "copy": {
                                "name": "slot_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-slot-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('appName')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name'))), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('appName')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), format('sites-{0}', parameters('name')))), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1277254088602407590"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "5805178546717255803"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              },
                                              "dependsOn": [
                                                "privateEndpoint"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfig": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').networkInterfaces]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "app",
                                "slot"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the slot."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the slot."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/slots', parameters('appName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the slot was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('slot', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('slot', '2022-09-01', 'full').location]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "metadata": {
                                "description": "The private endpoints of the slot."
                              },
                              "copy": {
                                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                                "input": {
                                  "name": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                                  "customDnsConfig": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                                  "networkInterfaceIds": "[reference(format('slot_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_basicPublishingCredentialsPolicies": {
                      "copy": {
                        "name": "app_basicPublishingCredentialsPolicies",
                        "count": "[length(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Site-Publish-Cred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "webAppName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()].name]"
                          },
                          "allow": {
                            "value": "[tryGet(coalesce(parameters('basicPublishingCredentialsPolicies'), createArray())[copyIndex()], 'allow')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5861139703409371797"
                            },
                            "name": "Web Site Basic Publishing Credentials Policies",
                            "description": "This module deploys a Web Site Basic Publishing Credentials Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "scm",
                                "ftp"
                              ],
                              "metadata": {
                                "description": "Required. The name of the resource."
                              }
                            },
                            "allow": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Set to true to enable or false to disable a publishing method."
                              }
                            },
                            "webAppName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('webAppName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "allow": "[parameters('allow')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the basic publishing credential policy."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the basic publishing credential policy."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the basic publishing credential policy was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.Web/sites/basicPublishingCredentialsPolicies', parameters('webAppName'), parameters('name')), '2022-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_hybridConnectionRelays": {
                      "copy": {
                        "name": "app_hybridConnectionRelays",
                        "count": "[length(coalesce(parameters('hybridConnectionRelays'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-HybridConnectionRelay-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hybridConnectionResourceId": {
                            "value": "[coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()].resourceId]"
                          },
                          "appName": {
                            "value": "[parameters('name')]"
                          },
                          "sendKeyName": {
                            "value": "[tryGet(coalesce(parameters('hybridConnectionRelays'), createArray())[copyIndex()], 'sendKeyName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "7661794789768148013"
                            },
                            "name": "Web/Function Apps Hybrid Connection Relay",
                            "description": "This module deploys a Site Hybrid Connection Namespace Relay.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "hybridConnectionResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the relay namespace hybrid connection."
                              }
                            },
                            "appName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent web site. Required if the template is used in a standalone deployment."
                              }
                            },
                            "sendKeyName": {
                              "type": "string",
                              "defaultValue": "defaultSender",
                              "metadata": {
                                "description": "Optional. Name of the authorization rule send key to use."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hybridConnectionNamespaces/relays",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                              "properties": {
                                "serviceBusNamespace": "[split(parameters('hybridConnectionResourceId'), '/')[8]]",
                                "serviceBusSuffix": "[split(substring(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, indexOf(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces', split(parameters('hybridConnectionResourceId'), '/')[8]), '2021-11-01').serviceBusEndpoint, '.servicebus')), ':')[0]]",
                                "relayName": "[split(parameters('hybridConnectionResourceId'), '/')[10]]",
                                "relayArmUri": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]",
                                "hostname": "[split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[0]]",
                                "port": "[int(split(json(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '2021-11-01').userMetadata)[0].value, ':')[1])]",
                                "sendKeyName": "[parameters('sendKeyName')]",
                                "sendKeyValue": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hybridConnectionResourceId'), '/')[2], split(parameters('hybridConnectionResourceId'), '/')[4]), 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules', split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10], parameters('sendKeyName')), '2021-11-01').primaryKey]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the hybrid connection relay.."
                              },
                              "value": "[format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10])]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the hybrid connection relay."
                              },
                              "value": "[resourceId('Microsoft.Web/sites/hybridConnectionNamespaces/relays', split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[0], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[1], split(format('{0}/{1}/{2}', parameters('appName'), split(parameters('hybridConnectionResourceId'), '/')[8], split(parameters('hybridConnectionResourceId'), '/')[10]), '/')[2])]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the resource was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    },
                    "app_privateEndpoints": {
                      "copy": {
                        "name": "app_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-app-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Web/sites', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Web/sites', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'sites')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1277254088602407590"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "5805178546717255803"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                            },
                            "customDnsConfig": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceIds": {
                              "type": "array",
                              "metadata": {
                                "description": "The IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').networkInterfaces]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "app"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the site."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the site."
                      },
                      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
                    },
                    "slots": {
                      "type": "array",
                      "metadata": {
                        "description": "The list of the slots."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[format('{0}-Slot-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('slots'), createArray())[copyIndex()].name)]"
                      }
                    },
                    "slotResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The list of the slot resource ids."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.resourceId.value]"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the site was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('app', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "slotSystemAssignedMIPrincipalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity of slots."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.systemAssignedMIPrincipalId.value]"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('app', '2022-09-01', 'full').location]"
                    },
                    "defaultHostname": {
                      "type": "string",
                      "metadata": {
                        "description": "Default hostname of the app."
                      },
                      "value": "[reference('app').defaultHostName]"
                    },
                    "customDomainVerificationId": {
                      "type": "string",
                      "metadata": {
                        "description": "Unique identifier that verifies the custom domains assigned to the app. Customer will add this ID to a txt record for verification."
                      },
                      "value": "[reference('app').customDomainVerificationId]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "metadata": {
                        "description": "The private endpoints of the site."
                      },
                      "copy": {
                        "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                        "input": {
                          "name": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                          "customDnsConfig": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                          "networkInterfaceIds": "[reference(format('app_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                        }
                      }
                    },
                    "slotPrivateEndpoints": {
                      "type": "array",
                      "metadata": {
                        "description": "The private endpoints of the slots."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('slots'), createArray()))]",
                        "input": "[reference(format('app_slots[{0}]', copyIndex())).outputs.privateEndpoints.value]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'app-service-plan')]",
                "[resourceId('Microsoft.Resources/deployments', 'monitoring')]",
                "[resourceId('Microsoft.Resources/deployments', 'star-backend')]",
                "[resourceId('Microsoft.Resources/deployments', 'staridentity')]"
              ]
            }
          ],
          "outputs": {
            "AZURE_RESOURCE_STAR_BACKEND_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'star-backend'), '2025-04-01').outputs.resourceId.value]"
            },
            "AZURE_RESOURCE_STAR_FRONTEND_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'star-frontend'), '2025-04-01').outputs.resourceId.value]"
            },
            "STAR_BACKEND_URI": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'star-backend'), '2025-04-01').outputs.defaultHostname.value)]"
            },
            "STAR_FRONTEND_URI": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'star-frontend'), '2025-04-01').outputs.defaultHostname.value)]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}', parameters('environmentName')))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_RESOURCE_STAR_BACKEND_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2025-04-01').outputs.AZURE_RESOURCE_STAR_BACKEND_ID.value]"
    },
    "AZURE_RESOURCE_STAR_FRONTEND_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2025-04-01').outputs.AZURE_RESOURCE_STAR_FRONTEND_ID.value]"
    },
    "STAR_BACKEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2025-04-01').outputs.STAR_BACKEND_URI.value]"
    },
    "STAR_FRONTEND_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2025-04-01').outputs.STAR_FRONTEND_URI.value]"
    }
  }
}