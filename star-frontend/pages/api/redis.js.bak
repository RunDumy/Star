import { createClient } from 'redis';
import { NextResponse } from 'next/server';

// Redis client configuration
let redisClient = null;

async function getRedisClient() {
  if (!redisClient) {
    try {
      console.log('Creating Redis client...');
      redisClient = createClient({
        url: process.env.REDIS_URL || 'redis://localhost:6379'
      });

      redisClient.on('error', (err) => {
        console.error('Redis Client Error:', err);
      });

      redisClient.on('connect', () => {
        console.log('Successfully connected to Redis');
      });

      redisClient.on('ready', () => {
        console.log('Redis client ready');
      });

      console.log('Connecting to Redis...');
      await redisClient.connect();
      console.log('Redis connection established');
    } catch (error) {
      console.error('Failed to create/connect Redis client:', error);
      redisClient = null; // Reset on failure
      throw error;
    }
  }
  return redisClient;
}

export const GET = async (request) => {
  try {
    const redis = await getRedisClient();

    // Example: Get data from Redis
    const result = await redis.get("item");

    return NextResponse.json({
      success: true,
      result: result || null,
      message: "Data retrieved from Redis"
    });
  } catch (error) {
    console.error('Redis operation failed:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      message: "Failed to retrieve data from Redis"
    }, { status: 500 });
  }
};

export const POST = async (request) => {
  try {
    const body = await request.json();
    const { key, value } = body;

    if (!key || !value) {
      return NextResponse.json({
        success: false,
        message: "Key and value are required"
      }, { status: 400 });
    }

    const redis = await getRedisClient();

    // Store data in Redis
    await redis.set(key, value);

    return NextResponse.json({
      success: true,
      message: `Data stored in Redis with key: ${key}`
    });
  } catch (error) {
    console.error('Redis operation failed:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      message: "Failed to store data in Redis"
    }, { status: 500 });
  }
};